#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/shm.h>
#include <sys/ipc.h>
#include <sys/wait.h>

#define SHM_KEY 1000
#define ARRAY_SIZE 10

// Structure to hold shared memory data
typedef struct {
    int data[ARRAY_SIZE];
    int minimum;
    double average;
} SharedData;

// Function for the child process to find the minimum value
void findMinimum(SharedData *sharedData) {
    int min = sharedData->data[0];

    for (int i = 1; i < ARRAY_SIZE; i++) {
        if (sharedData->data[i] < min) {
            min = sharedData->data[i];
        }
    }

    sharedData->minimum = min;
}

// Function for the child process to find the average
void findAverage(SharedData *sharedData) {
    double sum = 0.0;

    for (int i = 0; i < ARRAY_SIZE; i++) {
        sum += sharedData->data[i];
    }

    sharedData->average = sum / ARRAY_SIZE;
}

int main() {
    int shm_id;
    SharedData *sharedData;
    pid_t child1, child2;

    // Create shared memory segment
    shm_id = shmget(SHM_KEY, sizeof(SharedData), IPC_CREAT | 0666);
    if (shm_id == -1) {
        perror("shmget failed");
        exit(1);
    }

    // Attach shared memory segment
    sharedData = (SharedData *)shmat(shm_id, NULL, 0);

    // Fill shared memory with an array of integers (you can modify as needed)
    for (int i = 0; i < ARRAY_SIZE; i++) {
        sharedData->data[i] = rand() % 100; // Fill with random integers for example
    }

    // Create child process 1
    child1 = fork();

    if (child1 < 0) {
        perror("Forking child 1 failed");
    } else if (child1 == 0) {
        // Child process 1
        findMinimum(sharedData);
        exit(0);
    }

    // Create child process 2
    child2 = fork();

    if (child2 < 0) {
        perror("Forking child 2 failed");
    } else if (child2 == 0) {
        // Child process 2
        findAverage(sharedData);
        exit(0);
    }

    // Parent process
    // Wait for child processes to complete
    wait(NULL);
    wait(NULL);

    // Print the minimum and average
    printf("Minimum: %d\n", sharedData->minimum);
    printf("Average: %.2f\n", sharedData->average);

    // Clean up shared memory
    shmctl(shm_id, IPC_RMID, NULL);

    return 0;
}
